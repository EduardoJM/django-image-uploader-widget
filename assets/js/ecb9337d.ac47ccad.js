"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[274],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,m=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),c=o,f=u["".concat(m,".").concat(c)]||u[c]||p[c]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5402:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:4},m="Multiple Instances of Same Form",l={unversionedId:"widget/multiple-instances-of-same-form",id:"widget/multiple-instances-of-same-form",title:"Multiple Instances of Same Form",description:"On the issue #112, @tlcaputi asked about using the django-image-uploader-widget with several forms. The answer for this issue, motivated this documentation article.",source:"@site/docs/widget/multiple-instances-of-same-form.md",sourceDirName:"widget",slug:"/widget/multiple-instances-of-same-form",permalink:"/django-image-uploader-widget/docs/widget/multiple-instances-of-same-form",editUrl:"https://github.com/inventare/django-image-uploader-widget/blob/main/docs/docs/widget/multiple-instances-of-same-form.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Accept Input Attribute",permalink:"/django-image-uploader-widget/docs/widget/accept"},next:{title:"Tutorial",permalink:"/django-image-uploader-widget/docs/inline_admin/tutorial"}},d=[],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multiple-instances-of-same-form"},"Multiple Instances of Same Form"),(0,i.kt)("p",null,"On the issue ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/inventare/django-image-uploader-widget/issues/112"},"#112"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tlcaputi"},"@tlcaputi")," asked about using the ",(0,i.kt)("inlineCode",{parentName:"p"},"django-image-uploader-widget")," with several forms. The answer for this issue, motivated this documentation article."),(0,i.kt)("p",null,"The basic idea for this article is: we have an ",(0,i.kt)("inlineCode",{parentName:"p"},"view")," with multiples instances of the same ",(0,i.kt)("inlineCode",{parentName:"p"},"ModelForm")," with one (or more) ",(0,i.kt)("inlineCode",{parentName:"p"},"django-image-uploader-widget"),". For example, we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Event")," model, a ",(0,i.kt)("inlineCode",{parentName:"p"},"EventEditForm")," model form, a ",(0,i.kt)("inlineCode",{parentName:"p"},"page")," view and a ",(0,i.kt)("inlineCode",{parentName:"p"},"page.html")," template:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# models.py\nfrom django.db import models\n\nclass Event(models.Model):\n    event_title = models.CharField(max_length=200)\n    headshot = models.ImageField(upload_to='profile_pictures/', default='profile_pictures/default.jpg')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# forms.py\nfrom django import forms\nfrom image_uploader_widget.widgets import ImageUploaderWidget\nfrom .models import Event\n\nclass EventEditForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        widgets = {\n            'headshot': ImageUploaderWidget(),\n        }\n        fields = [\n            'event_title',\n            'headshot'\n        ]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Event\nfrom .forms import EventEditForm\n\ndef page(request):\n    if request.method == \"GET\":\n        events = Event.objects.all()\n        events_with_forms = []\n        for event in events:\n            events_with_forms.append({\n                'event': event,\n                'form': EventEditForm(instance=event),\n            })\n        return render(request, \"page.html\", {\n            'events_with_form': events_with_forms,\n            'new_event_form': EventEditForm(),\n        })\n    if request.method == \"POST\":\n        event_id = request.POST.get('event_id')\n        if not event_id:\n            form = EventEditForm(request.POST, request.FILES)\n            if form.is_valid():\n                form.save()\n                return redirect('home')\n\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventEditForm(request.POST, request.FILES, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- templates/page.html --\x3e\n{% load crispy_forms_filters %}\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n    {{new_event_form.media}}\n</head>\n<body>\n\n    {% for event in events_with_form %}\n        <form method="post" enctype="multipart/form-data">\n            {% csrf_token %}\n            <input type="hidden" name="event_id" value="{{ event.event.id }}">\n            {{ event.form|crispy }}\n            <button type="submit">Update</button>\n        </form>\n    {% endfor %}\n\n    <form method="post" enctype="multipart/form-data">\n        {% csrf_token %}\n        {{ new_event_form|crispy }}\n        <button type="submit">Create</button>\n    </form>\n    \n</body>\n</html>\n')),(0,i.kt)("p",null,"By default, this does not work, and the reason for this is: the field id is used to control the ",(0,i.kt)("inlineCode",{parentName:"p"},"django-image-uploader-widget")," and the field id is the same for each form. To solve this problem we have to change the field id attribute for each field, and this can be does changing the ModelForm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# forms.py\nfrom django import forms\nfrom image_uploader_widget.widgets import ImageUploaderWidget\nfrom .models import Event\n\nclass EventEditForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.instance:\n            id = str(self.instance.pk)\n            self.fields['headshot'].widget.attrs['id'] = \"headshot_%s\" % id\n        \n    class Meta:\n        model = Event\n        widgets = {\n            'headshot': ImageUploaderWidget(),\n        }\n        fields = [\n            'event_title',\n            'headshot'\n        ]\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The original answer is disponible, also, in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/inventare/django-image-uploader-widget/issues/112#issuecomment-1771635753"},"github issue"),"."))}u.isMDXComponent=!0}}]);