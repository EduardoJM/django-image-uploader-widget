"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6540],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(t),u=a,g=c["".concat(l,".").concat(u)]||c[u]||s[u]||i;return t?r.createElement(g,d(d({ref:n},p),{},{components:t})):r.createElement(g,d({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,d=new Array(i);d[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,d[1]=o;for(var m=2;m<i;m++)d[m]=t[m];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5402:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2},d="Ordered Images Admin",o={unversionedId:"inline_admin/ordered",id:"inline_admin/ordered",title:"Ordered Images Admin",description:"Introduced at the 0.4.1 version.",source:"@site/docs/inline_admin/ordered.md",sourceDirName:"inline_admin",slug:"/inline_admin/ordered",permalink:"/django-image-uploader-widget/docs/next/inline_admin/ordered",editUrl:"https://github.com/inventare/django-image-uploader-widget/blob/main/docs/docs/inline_admin/ordered.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/django-image-uploader-widget/docs/next/inline_admin/tutorial"},next:{title:"Accept Input Attribute",permalink:"/django-image-uploader-widget/docs/next/inline_admin/accept"}},l=[{value:"Adding Order Field to Model",id:"adding-order-field-to-model",children:[],level:2},{value:"Change inline to OrderedImageUploaderInline",id:"change-inline-to-orderedimageuploaderinline",children:[],level:2},{value:"Attributes",id:"attributes",children:[],level:2}],m={toc:l};function p(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ordered-images-admin"},"Ordered Images Admin"),(0,a.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Versioning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Introduced at the 0.4.1 version."))),(0,a.kt)("p",null,"The first thing needed to understand the ordered version of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageUploaderInline")," is read the ",(0,a.kt)("a",{parentName:"p",href:"/django-image-uploader-widget/docs/next/inline_admin/tutorial"},"inline tutorial"),". This page has a documentation of how to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageUploaderInline")," with order field to allow to reorder, by clicking and dragging, the images inside the inline."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Behaviour of drag and drop reorder",src:t(324).Z})),(0,a.kt)("h2",{id:"adding-order-field-to-model"},"Adding Order Field to Model"),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"PositiveIntegerField")," to the model to store the order of the images inside the admin."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# ecommerce/models.py\nfrom django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n    \n    class Meta:\n        verbose_name = 'Product'\n        verbose_name_plural = 'Products'\n\nclass ProductImage(models.Model):\n    product = models.ForeignKey(\n        Product,\n        related_name=\"images\",\n        on_delete=models.CASCADE\n    )\n    image = models.ImageField(\"image\")\n    order = models.PositiveIntegerField('Order', default=1)\n\n    def __str__(self):\n        return str(self.image)\n    \n    class Meta:\n        verbose_name = 'Product Image'\n        verbose_name_plural = 'Product Images'\n")),(0,a.kt)("h2",{id:"change-inline-to-orderedimageuploaderinline"},"Change inline to OrderedImageUploaderInline"),(0,a.kt)("p",null,"Inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"admin.py"),", change the inline from ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageUploaderInline")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderedImageUploaderInline")," and setup some configs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# ecommerce/admin.py\nfrom django.contrib import admin\nfrom ecommerce.models import Product, ProductImage\nfrom image_uploader_widget.admin import ImageUploaderInline\n\nclass ProductImageAdmin(OrderedImageUploaderInline):\n    model = ProductImage\n\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    inlines = [ProductImageAdmin]\n\n")),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"order_field"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"str")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"order"')),(0,a.kt)("td",{parentName:"tr",align:null},"The name of field that represents the order of images.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"template"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"str")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'"admin/edit_inline/ordered_image_uploader.html"')),(0,a.kt)("td",{parentName:"tr",align:null},"The template path to render the widget.")))),(0,a.kt)("p",null,"All the attributes from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageUploaderInline")," are present too. For example, is possible to change the name of the used ",(0,a.kt)("inlineCode",{parentName:"p"},"order_field")," by adding it's attribute to the ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderedImageUploaderInline"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from image_uploader_widget.admin import ImageUploaderInline\n\nclass MyInlineAdminAdmin(OrderedImageUploaderInline):\n    model = MyModel\n    order_field = "my_custom_field"\n\n')))}p.isMDXComponent=!0},324:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/behaviour_reorder-001f9f879a718e10990da8fa0be3c745.gif"}}]);